(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{418:function(e,s,n){"use strict";n.r(s);var r=n(57),a=Object(r.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[e._v("前言")]),e._v(" "),n("p",[e._v("ECMAScript6发布到现在差不多有5年时间了。在这5年时间里ES6摧枯拉朽般的将现代前端“改朝换代”，Promise是其中“大将”般的存在，影响着无数的前端库和API。可以这么说，Promise已经是现代前端的“血液”。")]),e._v(" "),n("p",[e._v("尽管经过5年的日日夜夜，尽管书写过数不尽的Promise。面对着这个时而让我们感到真棒，用的舒服、时而坑得我们踉踉跄跄的API，我们真的了解它吗？")]),e._v(" "),n("h2",{attrs:{id:"陌生情景一-怎么和循环结合"}},[e._v("陌生情景一：怎么和循环结合")]),e._v(" "),n("p",[e._v("相信许多开发者最开始对Promise感到陌生的情景就是：不知道怎么跟循环结合使用。\n例如：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 我想将数组下的每个元素都执行一个函数\nfetchSomeData().then((res) => {\n    res.data.forEach((item) => {\n        doSomethingFunction(item);\n    })\n}).then(res => {\n    // 做其他事\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("这个例子有什么问题呢？")]),e._v(" "),n("p",[e._v("问题在于：第一个then回调函数返回的是undefined，就是说第二个then函数并没有等doSomethingFunction(item);执行完。事实上，它并不需要等待任何事情，并且可以在doSomethingFunction(item);执行了几个后执行。")]),e._v(" "),n("p",[e._v("这是一个非常隐蔽的错误，因为如果res.data足够小或者doSomethingFunction()执行的足够快，可能就不会发现任何问题。")]),e._v(" "),n("p",[e._v("如何解决？需要用到Promise.all()。")]),e._v(" "),n("h3",{attrs:{id:"promise-all"}},[e._v("Promise.all()")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fetchSomeData().then(res) => {\n    return Promise.all(res.data.map(item) => {\n        return doSomethingFunction(item);\n    })\n}).then(res => {\n    // 做其他事\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("Promise.all接收一个Promise对象组成的数组作为参数，当这个数组所有的Promise对象状态都变成resolved或者rejected的时候，它才会去调用then方法。")]),e._v(" "),n("h2",{attrs:{id:"陌生情景二-没有return"}},[e._v("陌生情景二：没有return")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fetchSomeData().then((res) => {\n    doSomethingFunction(res);\n}).then(res => {\n    // 做其他事\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("这个例子的问题在于第二个then函数获取的是undefined。使用了side effect去改变而不是返回。")]),e._v(" "),n("p",[e._v("每一个Promise都有一个then方法，我们能在then方法中做三件事情：")]),e._v(" "),n("ul",[n("li",[e._v("return 另一个Promise")]),e._v(" "),n("li",[e._v("return 一个值")]),e._v(" "),n("li",[e._v("throw 一个错误")])]),e._v(" "),n("h3",{attrs:{id:"返回一个promise"}},[e._v("返回一个Promise")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fetchSomeData().then((res) => {\n    return getId(res);\n}).then(res => {\n    // 我能得到id\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("使用return 返回第二个Promise，在第二个then方法中就能得到id。如果没有return，那么getId()只是一个side effect，那么第二个then方法只能得到undefined。")]),e._v(" "),n("h3",{attrs:{id:"返回一个值"}},[e._v("返回一个值")]),e._v(" "),n("p",[e._v("比如说要对id做一个缓存处理，以降低运行时间。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fetchSomeData().then((res) => {\n    if (idCache[id]) {\n        return idCache[id];\n    }\n    return getId(res);\n}).then(res => {\n    // 我能得到id\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("不管id是缓存中的，还是异步去获取的，都能返回正确的。")]),e._v(" "),n("h3",{attrs:{id:"throw-error"}},[e._v("throw error")]),e._v(" "),n("p",[e._v("throw error能让Promise变得更严谨。如果要在用户登出的时候做错误处理：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fetchSomeData().then((res) => {\n    if (logout) {\n        throw new Error('用户已登出')；\n    }\n    if (idCache[id]) {\n        return idCache[id];\n    }\n    return getId(res);\n}).then(res => {\n    // 我能得到id\n}).catch(err=> {\n    // 做错误处理\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("catch方法能获取得到错误。")]),e._v(" "),n("h2",{attrs:{id:"陌生情景三-不知道promise-resolve-与promise-reject"}},[e._v("陌生情景三：不知道Promise.resolve()与Promise.reject()")]),e._v(" "),n("p",[e._v("如果经常写出下面内容：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new Promise((resolve, reject) => {\n    resolve(doSomething())\n}).then(...)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("其实就是对Promise不熟悉，可以用更简短的语句去表达")]),e._v(" "),n("h3",{attrs:{id:"promise-resolve"}},[e._v("Promise.resolve")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve(doSomething()).then(...)\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[e._v("同样Promise.reject()可以返回立即被拒绝的Promise")]),e._v(" "),n("h3",{attrs:{id:"promise-reject"}},[e._v("Promise.reject")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.reject(new Error('some error'))\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h2",{attrs:{id:"陌生情景四-then-catch-与then-resolvehandler-rejecthandler-傻傻分不清楚"}},[e._v("陌生情景四：then().catch()与then(resolveHandler, rejectHandler)傻傻分不清楚")]),e._v(" "),n("p",[e._v("其实catch方法是then(null, function(err) {})的语法糖")]),e._v(" "),n("p",[e._v("下面这两段代码是相等的")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("promise().catch(err => {\n    // 处理错误\n})\n\npromise().then(null, err => {\n    // 处理错误\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("但并不意味着下面这两段代码是相等的")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("promise().then((res) => {\n    return otherPromise(res);\n}).cathc(err => {\n    // 能捕获得到错误\n})\n\npromise().then(res => {\n    return otherPromise(res);\n}, err => {\n    // 不能捕获得到错误\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("所以，当使用then(resolveHandler, rejectHandler)时，如果它本身发生错误，rejectHandler是不会捕获得到的。")]),e._v(" "),n("p",[e._v("出于这个原因，捕获错误尽量使用catch方法。")]),e._v(" "),n("h2",{attrs:{id:"陌生情景五-如何依次执行一系列的promise"}},[e._v("陌生情景五：如何依次执行一系列的promise")]),e._v(" "),n("p",[e._v("如果要执行一系列的promise，类似Promise.all()方法，但不会并行执行。可能会写出下面的代码")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function execute(promises) {\n    var result = Promise.resolve();\n    promise.forEach(promise => {\n        result = result.then(promise);\n    });\n    return result;\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("不幸的是，这无法按照预期去执行，仍然是并行执行的。")]),e._v(" "),n("p",[e._v("发生这种情况的原因是：预期是不希望对一系列的promise进行操作。但是根据promise规范，一旦创建了promise，它就会开始执行。")]),e._v(" "),n("p",[e._v("因此要用到promise工厂函数")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function execute(promiseFactories) {\n    var result = Promise.reslove();\n    promiseFactories.forEach(promiseFactory => {\n        result = result.then(promiseFactory);\n    });\n    return result;\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("promise工厂函数非常简单，只是一个返回promise的函数")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function promiseFactory() {\n    return promiseCreated();\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("这种方法之所以会有效，是因为promise工厂函数直到被调用时才创建promise。它与then函数的工作方式相同")]),e._v(" "),n("h2",{attrs:{id:"陌生情景六-then方法的使用"}},[e._v("陌生情景六：then方法的使用")]),e._v(" "),n("p",[e._v("你认为下面代码的输出是什么？")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve('foo').then(Promise.resolve('bar')).then((res) => {\n    console.log(res);\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("如果你认为输出bar，那就错了。实际上输出的是foo！")]),e._v(" "),n("p",[e._v("因为当传递给then()方法并非是一个函数时，它实际上执行then(null)，这样先前的promise结果就无法传给第二个then方法。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve('foo').then(null).then(res => {\n    console.log(res) // foo\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("简而言之，可以将promise直接传给then方法，但它并不会按照你的预期去执行。所以你要这样做")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Promise.resolve('foo').then(() => {\n    return Promise.resolve('bar')\n}).then(res => {\n    console.log(res); // bar\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("因此，请提醒自己：始终要将函数传递给then方法")]),e._v(" "),n("h2",{attrs:{id:"总结"}},[e._v("总结")]),e._v(" "),n("p",[e._v("有人说：一回生二回熟。")]),e._v(" "),n("p",[e._v("经历了上述这六回，相信对promise就像亲人一般的熟悉。")]),e._v(" "),n("p",[e._v("上述文章是翻译、加工自"),n("a",{attrs:{href:"https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("We have a problem with promises"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=a.exports}}]);